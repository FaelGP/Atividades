#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define max_users 1000

typedef struct user
{
char email[50]
char nome[50]
char fone[29]
int idade;
}user;

int n_user = 0;
user user_list[max_user];

voide incluir_usuario();
voide editar_usuario();
voide excluir_usuario();
voide buscar_usuario();
voide imprimir_usuario();
voide backup_usuario();
voide restaurar_usuario();

int main()
{
int opcao;

do
{
printf("menu de opcoes\n");
printf("1 - incluir usuarios");
printf("2 - editar usuarios");
printf("3 - excluir usuarios");
printf("4 - buscar usuarios");
printf("5 - imprimir usuarios");
printf("6 - fazer backup dos usuarios");
printf("7 - fazer restauracao dos dados");
printf("8 - sair");
printf("opcao");
scanf("&d", &opcao);

switch (opcao)
{
case 1:
incluir_usuario();
  break;
case 2:
editar_usuario();
  break;
case 3:
excluir_usuario();
  break;
case 4:
buscar_usuario();
  break;
case 5:
imprimir_usuario();
  break;
case 6:
backup_usuario();
  break;
case 7:
restaurar_usuario();
  break;
case 8:
break;

default:
  printf("opcao invalida");
  }
  
  }while (opcao != 0);
  return 0;


}

void incluir_usuario()
{
  if (n_users >= max_users)
  {
  printf("numero maximo de pessoas atingido");
  return;

  }
user noco_usuario;

printf("digite o email:");
scanf(""%s",novo_usuario.email");

printf("digite o nome:");
scanf("%s",novo_usuario.nome");

printf("digite o telefone:");
scanf(""%s",novo_usuario.fone");

printf("digite a idade:");
scanf("%d",&novo_usuario.idade);

user_list[n_users++] = novo_usuario;

}

void editar_usuario()
{

int index;
char email[50];

printf("digite o email do usuario para editar:");
scanf("%s", email);

index = buscar_usuario(email);

if (index == -1)
{
printf("usuario nao encontrado");
return;
}

printf("digite o novo email:\n");
scanf("%s",user_List[index].email);

printf("digite o novo nome:\n");
scanf("%s",user_List[index].nome);

printf("digite o novo telefone:\n");
scanf("%s",user_List[index].fone);

printf("digite a nova idade do usuario:\n");
scanf("%d",&user_list[index].idade);



}

void excluir_usuario()
{

int index;
char email[50];

printf("digite o e-mail do usuario para excluir");
scanf("%s", email);

index = buscar_usuario(email);

if(index == -1)
{
printf("usuario nao encontrado");
return 0;
}

for (int i = index; i < n_users; i++)
{
  user_list[i] = user_list[i + 1];
  {
  n_user--;
  
  }

int buscar_usuario (char *email)
{
for(int i = 0; i< n_user;i++)
{
if (strcmp(user_list[i].email, email) == 0)
{
return 1;
}
}

return -1;
}




return -1;
}

void imprimir_usuarios()
{
for(int i = 0; i < n_users; i++)
{
printf("email: %s",user_list[i].email);
printf("nome: %s",user_list[i].nome);
printf("telefone: %s",user_list[i].fone);
printf("idade: %d,user_list[i].idade");
printf("----------------------------------");
}


}

void backup_usuarios()
{
file *fp;

fp = fopen("users.dat", "wb");

if (fp == null)
{
printf("erro ao abrir o arquivo");
return;

}
fwrite(&n_users, sizeof(int), i, fp);
fwrite(user_list, sizepf(user), n_users,fp);

fclose(fp);
}

void restaurar_dados()
{
file *fp;

fp = fopen("users.dat", "rb");

if (fp == null)
{
printf("erro ao abrir arquivo");
return;
}


}


